Whoa, this isn't a real source file! What's going on here? Well, the headers for this module are
platform-specific, and some of them implement types and functions differently (i.e. functions as
macros, etc.), so the documentation needs somewhere to pull a standard interface from. Voila!

/*!
 * \defgroup etcpal_lock Locks and Synchronization (lock)
 * \ingroup etcpal
 * \brief Platform-neutral locks, mutexes and signals.
 *
 * ```c
 * #include "etcpal/lock.h"
 * ```
 *
 * @{
 */

/*!
 * \defgroup etcpal_mutex Mutexes
 * \brief Mutual-exclusion (mutex) objects.
 *
 * Sometimes also referred to as a critical section. Only one thread can take the mutex at a time
 * using etcpal_mutex_take(). Where possible on real-time platforms, the mutex provides priority
 * inheritance.
 *
 * etcpal_mutex implementations use the following constructs under the hood on various platforms:
 *
 * | On:      | etcpal_mutex uses: |
 * |----------|------------------|
 * | FreeRTOS | [Mutexes](https://www.freertos.org/Real-time-embedded-RTOS-mutexes.html) |
 * | Linux    | [pthread_mutex](https://linux.die.net/man/3/pthread_mutex_init) |
 * | macOS    | [pthread_mutex](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/pthread_mutex_init.3.html)
 * | MQX      | Lightweight Semaphores |
 * | Windows  | [Critical Section objects](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682530(v=vs.85).aspx) |
 *
 * @{
 */

/*!
 * \brief The mutex identifier.
 *
 * Depending on the platform, this could be a scalar type or a struct.
 */
typedef PLATFORM_DEFINED etcpal_mutex_t;

/*!
 * \brief Create a new mutex.
 * \param[out] id Mutex identifier on which to create a mutex. If this function returns true, id
 *                becomes valid for calls to etcpal_mutex_take() and etcpal_mutex_give().
 * \return true: The mutex was created.
 * \return false: The mutex was not created.
 */
bool etcpal_mutex_create(etcpal_mutex_t *id);

/*!
 * \brief Acquire a mutex.
 * 
 * Blocks until the mutex is acquired.
 *
 * \param[in] id Identifier for the mutex to acquire.
 * \return true: The mutex was acquired.
 * \return false: The mutex is invalid or an error occurred.
 */
bool etcpal_mutex_take(etcpal_mutex_t *id);

/*!
 * \brief Try to acquire a mutex.
 *
 * Returns immediately either failure or success.
 *
 * \param[in] id Identifier for the mutex to try to acquire.
 * \return true: The mutex was acquired.
 * \return false: The mutex was held by another thread, the mutex was invalid or an error occurred.
 */
bool etcpal_mutex_try_take(etcpal_mutex_t *id);

/*!
 * \brief Release a mutex.
 * \param[in] id Identifier for the mutex to release.
 */
void etcpal_mutex_give(etcpal_mutex_t *id);

/*!
 * \brief Destroy a mutex object.
 * \param[in] id Identifier for the mutex to destroy.
 */
void etcpal_mutex_destroy(etcpal_mutex_t *id);

/*!
 * @}
 */

/*!
 * \defgroup etcpal_signal Signals
 * \brief Signal objects.
 *
 * Sometimes also referred to as a binary semaphore or event. Used for thread synchronization; a
 * call to etcpal_signal_wait() blocks until etcpal_signal_post() is called.
 *
 * etcpal_signal implementations use the following constructs under the hood on various platforms:
 *
 * | On:      | etcpal_mutex uses: |
 * |----------|------------------|
 * | FreeRTOS | [Binary Semaphores](https://www.freertos.org/Embedded-RTOS-Binary-Semaphores.html) |
 * | Linux    | [pthread_cond](https://linux.die.net/man/3/pthread_cond_init) |
 * | macOS    | [pthread_cond](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/pthread_cond_init.3.html)
 * | MQX      | Lightweight Events |
 * | Windows  | [Event objects](https://docs.microsoft.com/en-us/windows/desktop/sync/using-event-objects) |
 *
 * @{
 */

/*!
 * \brief The signal identifier.
 *
 * Depending on the platform, this could be a scalar type or a struct.
 */
typedef PLATFORM_DEFINED etcpal_signal_t;

/*!
 * \brief Create a new signal.
 *
 * Signals are created in the "unsignaled" state; that is, the first call to etcpal_signal_wait()
 * will block.
 *
 * \param[out] id Signal identifier on which to create a signal. If this function returns true,
 *                id becomes valid for calls to etcpal_signal_wait() and etcpal_signal_post().
 * \return true: The signal was created.
 * \return false: The signal was not created.
 */
bool etcpal_signal_create(etcpal_signal_t *id);

/*!
 * \brief Wait for a signal.
 *
 * If this is the first call to etcpal_signal_wait() after the signal object has been posted via
 * etcpal_signal_post(), returns immediately. Otherwise, blocks until a call to etcpal_signal_post() on
 * the signal object.
 *
 * \param[in] id Identifier for the signal for which to wait.
 * \return true: The signal was received.
 * \return false: The signal is invalid or an error occurred.
 */
bool etcpal_signal_wait(etcpal_signal_t *id);

/*!
 * \brief Poll the state of a signal.
 *
 * Returns immediately whether the object is in a "signaled" state.
 *
 * \param[in] id Identifier for the signal to poll.
 * \return true: The signal is in a signaled state.
 * \return false: The signal is not in a signaled state (or the signal is invalid).
 */
bool etcpal_signal_poll(etcpal_signal_t *id);

/*!
 * \brief Post a signal.
 *
 * If no threads are waiting for the signal, puts the signal object in the "signaled" state (a
 * subsequent call to etcpal_signal_wait() will return immediately). Otherwise, wakes up the first
 * thread that waited for the signal.
 *
 * \param[in] id Identifier for the signal to post.
 */
void etcpal_signal_post(etcpal_signal_t *id);

/*!
 * \brief Destroy a signal object.
 * \param[in] id Identifier for the signal to destroy.
 */
void etcpal_signal_destroy(etcpal_signal_t *id);

/*!
 * @}
 */

/*!
 * \defgroup etcpal_rwlock Read-Write Locks
 * \brief Reader-writer lock objects.
 *
 * Sometimes also referred to as a shared-exclusive lock or multi-reader lock. When implemented to
 * protect a resource, allows multiple "readers" to access the resource at the same time for
 * read-only purposes.
 *
 * These are implemented as "write-preferring" reader-writer locks; this means that new readers are
 * blocked from acquiring a read lock if any context is currently waiting for a write lock.
 *
 * EtcPal read-write locks are typically implemented using multiple OS synchronization constructs
 * under the hood.
 *
 * @{
 */

/*!
 * \brief The read-write lock identifier.
 *
 * This is highly likely to be a struct.
 */
typedef PLATFORM_DEFINED etcpal_rwlock_t;

/*!
 * \brief Create a new read-write lock.
 * \param[in,out] id Read-write lock identifier on which to create a read-write lock. If this
 *                   function returns true, id becomes valid for calls to etcpal_rwlock_readlock(),
 *                   etcpal_rwlock_writelock(), etc.
 * \return true: The read-write lock was created.
 * \return false: The read-write lock was not created.
 */
bool etcpal_rwlock_create(etcpal_rwlock_t *id);

/*!
 * \brief Access a read-write lock for reading.
 *
 * Blocks until any write lock has been released. Multiple contexts may have a read lock
 * simultaneously. In typical usage, the resource protected by this lock should only be read, not
 * modified, while inside a read lock.
 *
 * \param[in] id Identifier for the read-write lock on which to acquire a read lock.
 * \return true: The read lock was acquired.
 * \return false: The lock is invalid, or an error occurred.
 */
bool etcpal_rwlock_readlock(etcpal_rwlock_t *id);

/*!
 * \brief Try to access a read-write lock for reading.
 *
 * Returns immediately either failure or success; does not block. Fails if a write lock is held
 * from another context. Multiple contexts may have a read lock simultaneously. In typical usage,
 * the resource protected by this lock should only be read, not modified, while inside a read lock.
 *
 * \param[in] id Identifier for the read-write lock on which to acquire a read lock.
 * \return true: The read lock was acquired.
 * \return false: The lock was held for writing from another thread, the lock is invalid, or an
 *         error occurred.
 */
bool etcpal_rwlock_try_readlock(etcpal_rwlock_t *id);

/*!
 * \brief Release a read lock on a read-write lock object.
 * \param[in] id Identifier for the read-write lock on which to release the read lock.
 */
void etcpal_rwlock_readunlock(etcpal_rwlock_t *id);

/*!
 * \brief Access a read-write lock for writing.
 *
 * Blocks until all read and write locks have been released. No new read locks are allowed while
 * this function is being blocked on.
 *
 * \param[in] id Identifier for the read-write lock on which to acquire a write lock.
 * \return true: The write lock was acquired.
 * \return false: The lock is invalid, or an error occurred.
 */
bool etcpal_rwlock_writelock(etcpal_rwlock_t *id);

/*!
 * \brief Try to access a read-write lock for writing.
 *
 * Returns immediately either failure or success; does not block. Fails if a read or write lock is
 * held from another context. 
 *
 * \param[in] id Identifier for the read-write lock on which to acquire a read lock.
 * \return true: The write lock was acquired.
 * \return false: The lock was held for reading or writing from another thread, the lock was
 *         invalid, or an error occurred.
 */
bool etcpal_rwlock_try_writelock(etcpal_rwlock_t *id);

/*!
 * \brief Release a write lock on a read-write lock object.
 * \param[in] id Identifier for the read-write lock on which to release the write lock.
 */
void etcpal_rwlock_writeunlock(etcpal_rwlock_t *id);

/*!
 * \brief Destroy a read-write lock object.
 * \param[in] id Identifier for the read-write lock object to destroy.
 */
void etcpal_rwlock_destroy(etcpal_rwlock_t *id);

/*!
 * @}
 */

/*!
 * @}
 */
