workflow:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_REF_NAME == "library-maintenance"'

stages:
  - build
  # TODO rearchitect on-target testing setup so these stages don't need to be serialized
  - build-freertos
  - build-mqx
  - deploy

variables:
  COMMON_CMAKE_DEFS: -DETCPAL_BUILD_MOCK_LIB=ON -DETCPAL_BUILD_TESTS=ON -DETCPAL_BUILD_EXAMPLES=ON

include:
  # Helper for environment setup for native Ninja builds with Windows/MSVC
  - project: "etc/common-tech/tools/gitlab-ci-util"
    ref: v2.0.1
    file: "/ci-yml/msvc-environment.yml"
  # Versioned build automation
  - project: "etc/common-tech/tools/gitlab-ci-util"
    ref: v2.0.1
    file: "/ci-yml/deploy-versioned-build.yml"

windows-build-and-test:
  stage: build
  tags:
    - ct-windows
  variables:
    CMAKE_DEFS: -DETCPAL_ENABLE_CLANG_TIDY=ON -DETCPAL_CLANG_TIDY_WERROR=ON -DETCPAL_ENABLE_ASAN=ON
  script:
    - mkdir build
    - cd build
    - cmake -G "Visual Studio 16 2019" -A x64 $env:COMMON_CMAKE_DEFS.Split(" ") $env:CMAKE_DEFS.Split(" ") ..
    - cmake --build . --config Release -j
    - cd ..
    - python tools\ci\run_tests.py build --config Release
  artifacts:
    when: always
    reports:
      junit: build/test_results_*.xml

macos-build-and-test:
  stage: build
  tags:
    - ct-macos
  parallel:
    matrix:
      - SANITIZER_DEFS:
          - -DETCPAL_ENABLE_ASAN=ON -DETCPAL_ENABLE_UBSAN=ON
          - -DETCPAL_ENABLE_MSAN=ON
          - -DETCPAL_ENABLE_TSAN=ON
  script:
    - mkdir build
    - cd build
    - cmake ${COMMON_CMAKE_DEFS} ${SANITIZER_DEFS} ..
    - cmake --build .
    - cd ..
    - python3 tools/ci/run_tests.py build
  artifacts:
    when: always
    reports:
      junit: build/test_results_*.xml

linux-build-and-test:
  stage: build
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/gcc-cmake:latest
  tags:
    - etc-linux-docker
  variables:
    # TODO remove ETCPAL_TEST_IPV6=OFF when DEVOPS-1383 is completed
    CMAKE_DEFS: -DETCPAL_TEST_IPV6=OFF
  parallel:
    matrix:
      - CMAKE_CXX_FLAGS:
          - -fexceptions
          - -fno-exceptions
        SANITIZER_DEFS:
          - -DETCPAL_ENABLE_ASAN=ON -DETCPAL_ENABLE_UBSAN=ON
          - -DETCPAL_ENABLE_TSAN=ON
  script:
    - python3 -m pip install unity-test-parser
    - mkdir build
    - cd build
    # The CMAKE_CXX_FLAGS var must be quoted here and not in the variable because of this bug:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1742
    - cmake -G "Unix Makefiles" ${COMMON_CMAKE_DEFS} ${CMAKE_DEFS} ${SANITIZER_DEFS} -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" ..
    - cmake --build .
    - cd ..
    - python3 tools/ci/run_tests.py build
  artifacts:
    when: always
    reports:
      junit: build/test_results_*.xml

oss-build-and-test:
  stage: build
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/gcc-cmake:latest
  tags:
    - etc-linux-docker
  script:
    # Remove the .git folder to simulate building from P4/zip archive
    - rm -rf .git/
    - mkdir build
    - cd build
    # Use default config, no options
    - cmake -G "Unix Makefiles" ..
    - cmake --build .

# Build and test EtcPal with OS and network support disabled
# This is currently done on Linux but with the OS and network targets set to none.
bare-metal-build-and-test:
  stage: build
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/gcc-cmake:latest
  tags:
    - etc-linux-docker
  variables:
    CMAKE_DEFS: -DETCPAL_BUILD_TESTS=ON -DETCPAL_ENABLE_ASAN=ON -DETCPAL_OS_TARGET='none' -DETCPAL_NET_TARGET='none'
  script:
    - python3 -m pip install unity-test-parser
    - mkdir build
    - cd build
    - cmake -G "Unix Makefiles" ${CMAKE_DEFS} ..
    - cmake --build .
    - cd ..
    - python3 tools/ci/run_tests.py build

freertos-lwip-build-and-test:
  stage: build-freertos
  tags:
    - ct-etcpal-test
  script:
    - python C:\etcpal_testing\build_and_test_etcpal.py $env:CI_PROJECT_DIR freertos_lwip
  artifacts:
    when: always
    reports:
      junit: test_results_*.xml

mqx-build-and-test:
  stage: build-mqx
  tags:
    - ct-etcpal-test
  script:
    - python C:\etcpal_testing\build_and_test_etcpal.py $env:CI_PROJECT_DIR mqx
  artifacts:
    when: always
    reports:
      junit: test_results_*.xml

lint:
  stage: build
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/gcc-cmake:latest
  variables:
    CMAKE_DEFS: -DETCPAL_ENABLE_CLANG_TIDY=ON -DETCPAL_CLANG_TIDY_WERROR=ON
  script:
    - mkdir build
    - cd build
    - cmake -G "Unix Makefiles" ${COMMON_CMAKE_DEFS} ..
    - cmake --build . --target check_formatting
    - cmake --build . -j

docs-test:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/doxygen:1.9.1
  variables:
    GIT_DEPTH: 0
  script:
    - pip install --upgrade etcdevtool
    - etcdevtool docs . 1.9.1

deploy-docs:
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/doxygen:1.9.1
  variables:
    # Fetch all tags
    GIT_DEPTH: 0
    GH_REPO_NAME: EtcPalDocs
    GH_REPO_REF: github.com/ETCLabs/EtcPalDocs.git
    GH_REPO_TOKEN: $SVC_ETCLABS_REPO_TOKEN
  script:
    - pip install --upgrade etcdevtool
    - chmod +x tools/ci/publish_docs.sh
    - tools/ci/publish_docs.sh
