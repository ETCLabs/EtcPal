# The EtcPal build and test pipeline.

trigger:
- develop
- master
- release/*

pr:
- develop

variables:
  cmake_definitions: -DETCPAL_BUILD_MOCK_LIB=ON -DETCPAL_BUILDING_FOR_AZURE_PIPELINES_CI=1

jobs:
# Build and test EtcPal on Windows using CMake and Visual Studio 2019.
- job: windows_build
  displayName: 'Windows Build and Test'
  pool:
    vmImage: 'windows-2019'
  variables:
    cmake_generator: 'Visual Studio 16 2019'
  steps:
  - script: |
      mkdir build
      cd build
      cmake --version
      cmake -G "$(cmake_generator)" -A x64 $(cmake_definitions) ..
    displayName: 'Configure Project'
  - task: VSBuild@1
    displayName: 'Build Project'
    inputs:
      solution: $(Build.SourcesDirectory)\build\EtcPal.sln
      configuration: Release
  - task: UsePythonVersion@0
    displayName: 'Select Python Version'
    inputs:
      versionSpec: '3.x'
      addToPath: true
  - script: |
      python -m pip install unity-test-parser
      python tools\ci\run_tests.py build --config Release
    displayName: 'Run Tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_*.xml'
      searchFolder: '$(Build.SourcesDirectory)/build'
      mergeTestResults: true
      testRunTitle: 'Windows x64'

- job: macos_build
  displayName: 'macOS Build and Test'
  pool:
    vmImage: 'macos-latest'
  steps:
  - script: |
      mkdir build
      cd build
      cmake --version
      cmake $(cmake_definitions) ..
      cmake --build .
    displayName: 'Configure and Build Project'
  - task: UsePythonVersion@0
    displayName: 'Select Python Version'
    inputs:
      versionSpec: '3.x'
      addToPath: true
  - script: |
      python -m pip install unity-test-parser
      python tools/ci/run_tests.py build
    displayName: 'Run Tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_*.xml'
      searchFolder: '$(Build.SourcesDirectory)/build'
      mergeTestResults: true
      testRunTitle: 'macOS'

- job: linux_build
  displayName: 'Linux Build and Test'
  pool:
    # TODO change to ubuntu-latest when this issue is fixed:
    # https://github.com/microsoft/azure-pipelines-image-generation/issues/1379
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install uuid-dev
      mkdir build
      cd build
      cmake --version
      cmake -G "Unix Makefiles" $(cmake_definitions) ..
      cmake --build .
    displayName: 'Configure and Build Project'
  - task: UsePythonVersion@0
    displayName: 'Select Python Version'
    inputs:
      versionSpec: '3.x'
      addToPath: true
  - script: |
      python -m pip install unity-test-parser
      python tools/ci/run_tests.py build
    displayName: 'Run Tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_*.xml'
      searchFolder: '$(Build.SourcesDirectory)/build'
      mergeTestResults: true
      testRunTitle: 'Linux'

# Generate documentation with doxygen. Documentation is generated from the
# develop branch and posted to the 'head' portion of the Github page
# (etclabs.github.io/EtcPal)
- job: docs
  displayName: 'Deploy Documentation'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  pool:
    # TODO change to ubuntu-latest when this issue is fixed:
    # https://github.com/microsoft/azure-pipelines-image-generation/issues/1379
    vmImage: 'ubuntu-18.04'
  variables: 
  - group: github-push-access
  steps:
  - script: sudo apt-get install doxygen
    displayName: 'Install dependencies'
  - script: |
      cd tools/ci
      chmod +x publish_docs.sh
      ./publish_docs.sh
    displayName: 'Generate and deploy documentation'
    env:
      GH_REPO_NAME: EtcPal
      GH_REPO_REF: github.com/ETCLabs/EtcPal.git
      GH_REPO_TOKEN: $(GH_ACCESS_TOKEN)
  