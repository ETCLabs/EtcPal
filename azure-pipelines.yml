# The EtcPal build and test pipeline.

trigger:
- develop
- master
- release/*
- refs/tags/v*.*.*.*

pr:
- develop
- review-base/*

variables:
  cmake_definitions: -DETCPAL_BUILD_MOCK_LIB=ON -DETCPAL_BUILDING_FOR_AZURE_PIPELINES_CI=1

stages:
- stage: build_and_test
  displayName: 'Build and Test EtcPal'
  jobs:
  # Build and test EtcPal on Windows using CMake and Visual Studio 2019.
  - job: windows_build
    displayName: 'Windows'
    pool:
      vmImage: 'windows-2019'
    variables:
      cmake_generator: 'Visual Studio 16 2019'
    steps:
    - script: |
        mkdir build
        cd build
        cmake --version
        cmake -G "$(cmake_generator)" -A x64 $(cmake_definitions) ..
      displayName: 'Configure Project'
    - task: VSBuild@1
      displayName: 'Build Project'
      inputs:
        solution: $(Build.SourcesDirectory)\build\EtcPal.sln
        configuration: Release
    - task: UsePythonVersion@0
      displayName: 'Select Python Version'
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - script: |
        python -m pip install unity-test-parser
        python tools\ci\run_tests.py build --config Release
      displayName: 'Run Tests'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test_results_*.xml'
        searchFolder: '$(Build.SourcesDirectory)/build'
        mergeTestResults: true
        testRunTitle: 'Windows x64'

  # Build and test EtcPal on native macOS using CMake and Xcode/clang
  - job: macos_build
    displayName: 'macOS'
    pool:
      vmImage: 'macos-latest'
    steps:
    - script: |
        mkdir build
        cd build
        cmake --version
        cmake $(cmake_definitions) ..
        cmake --build .
      displayName: 'Configure and Build Project'
    - task: UsePythonVersion@0
      displayName: 'Select Python Version'
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - script: |
        python -m pip install unity-test-parser
        python tools/ci/run_tests.py build
      displayName: 'Run Tests'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test_results_*.xml'
        searchFolder: '$(Build.SourcesDirectory)/build'
        mergeTestResults: true
        testRunTitle: 'macOS'

  # Build and test EtcPal for iOS using CMake and Xcode/clang
  - job: ios_build
    displayName: 'iOS'
    pool:
      vmImage: 'macos-latest'
    steps:
    - script: |
        mkdir build
        cd build
        cmake --version
        cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/cross-toolchains/ios.toolchain.cmake $(cmake_definitions) ..
        cmake --build .
      displayName: 'Configure and Build Project'

  # Build and test EtcPal on Linux using CMake and gcc
  - job: linux_build
    displayName: 'Linux'
    pool:
      # TODO change to ubuntu-latest when this issue is fixed:
      # https://github.com/microsoft/azure-pipelines-image-generation/issues/1379
      vmImage: 'ubuntu-18.04'
    variables:
      cmake_definitions_linux: -DCMAKE_C_FLAGS="-fsanitize=address" -DCMAKE_CXX_FLAGS="-fsanitize=address" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address"
    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install uuid-dev
        mkdir build
        cd build
        cmake --version
        cmake -G "Unix Makefiles" $(cmake_definitions) $(cmake_definitions_linux) ..
        cmake --build .
      displayName: 'Configure and Build Project'
    - task: UsePythonVersion@0
      displayName: 'Select Python Version'
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - script: |
        python -m pip install unity-test-parser
        python tools/ci/run_tests.py build
      displayName: 'Run Tests'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test_results_*.xml'
        searchFolder: '$(Build.SourcesDirectory)/build'
        mergeTestResults: true
        testRunTitle: 'Linux'

  # Build and test EtcPal against FreeRTOS, lwIP for ARM Cortex-M4 using arm-gcc
  - job: freertos_lwip_build
    displayName: 'FreeRTOS/lwIP'
    pool:
      name: OnTargetTesting
      demands: freertos_lwip_k65
    steps:
    - script: |
        python $(Agent.HomeDirectory)\build_and_test_freertos_lwip_k65.py etcpal $(Build.SourcesDirectory)
      displayName: 'Build Project and Run Tests'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test_results_*.xml'
        searchFolder: '$(Build.SourcesDirectory)'
        mergeTestResults: true
        testRunTitle: 'FreeRTOS_lwIP'

  # Build and test EtcPal against MQX for ARM Cortex-M4 using IAR
  - job: mqx
    displayName: 'MQX'
    pool:
      name: OnTargetTesting
      demands: mqx_k61
    steps:
    - script: |
        python $(Agent.HomeDirectory)\build_and_test_mqx_k61.py etcpal $(Build.SourcesDirectory)
      displayName: 'Build Project and Run Tests'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test_results_*.xml'
        searchFolder: '$(Build.SourcesDirectory)'
        mergeTestResults: true
        testRunTitle: 'MQX'

  # Generate documentation with doxygen. Documentation is generated from the
  # develop branch and posted to the 'head' portion of the Github page
  # (etclabs.github.io/EtcPal)
  - job: docs
    displayName: 'Deploy Documentation'
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/pull'))
    pool:
      # TODO change to ubuntu-latest when this issue is fixed:
      # https://github.com/microsoft/azure-pipelines-image-generation/issues/1379
      vmImage: 'ubuntu-18.04'
    variables: 
    - group: github-push-access
    steps:
    - script: sudo apt-get install doxygen
      displayName: 'Install Doxygen'
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - task: ShellScript@2
      inputs:
        scriptPath: 'tools/ci/publish_docs.sh'
        failOnStandardError: false
      displayName: 'Generate and Push Documentation'
      env:
        GH_REPO_NAME: EtcPal
        GH_REPO_REF: github.com/ETCLabs/EtcPal.git
        GH_REPO_TOKEN: $(GH_ACCESS_TOKEN)

- stage: deploy
  displayName: 'Deploy Build Artifacts'
  condition: and(succeeded('build_and_test'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - job: create_build_report
    displayName: 'Create Jira Build Report'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: etc_jira
    steps:
    - task: UsePythonVersion@0
      displayName: 'Select Python Version'
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - script: |
        python -m pip install requests
        python tools/ci/create_build_report.py
      displayName: 'Run Create Build Report Script'
      env:
        BUILDNETWORKING_PASSWORD: $(buildnetworking_password)
