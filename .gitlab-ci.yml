workflow:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

stages:
  - build
  # TODO rearchitect on-target testing setup so these stages don't need to be serialized
  - build-freertos
  - build-mqx
  - deploy

variables:
  COMMON_CMAKE_DEFS: -DETCPAL_BUILD_MOCK_LIB=ON -DETCPAL_BUILD_TESTS=ON -DETCPAL_BUILD_EXAMPLES=ON -DETCPAL_BUILDING_FOR_AZURE_PIPELINES_CI=1
  PROJECT_BOT_USER: project_66_bot

windows-build-and-test:
  stage: build
  tags:
    - ct-windows
  variables:
    CMAKE_GENERATOR: Visual Studio 15 2017 Win64
  script:
    - mkdir build
    - cd build
    - cmake -G "$env:CMAKE_GENERATOR" $env:COMMON_CMAKE_DEFS.Split(" ") ..
    - cmake --build . --config Release -j
    - cd ..
    - python tools\ci\run_tests.py build --config Release
  artifacts:
    when: always
    reports:
      junit: build/test_results_*.xml
  
macos-build-and-test:
  stage: build
  tags:
    - ct-macos
  script:
    - mkdir build
    - cd build
    - cmake ${COMMON_CMAKE_DEFS} ..
    - cmake --build .
    - cd ..
    - python3 tools/ci/run_tests.py build
  artifacts:
    when: always
    reports:
      junit: build/test_results_*.xml

linux-build-and-test:
  stage: build
  image: rikorose/gcc-cmake:gcc-11
  tags:
    - etc-linux-docker
  variables:
    # TODO remove ETCPAL_TEST_IPV6=OFF when DEVOPS-1383 is completed
    CMAKE_DEFS: -DCMAKE_C_FLAGS="-fsanitize=address" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address" -DETCPAL_TEST_IPV6=OFF
  parallel:
    matrix:
      - CMAKE_CXX_FLAGS: -fsanitize=address
      # Exceptions disabled
      - CMAKE_CXX_FLAGS: -fno-exceptions -fsanitize=address
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends python3-pip
    - python3 -m pip install unity-test-parser
    - mkdir build
    - cd build
    # The CMAKE_CXX_FLAGS var must be quoted here and not in the variable because of this bug:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1742
    - cmake -G "Unix Makefiles" ${COMMON_CMAKE_DEFS} ${CMAKE_DEFS} -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" ..
    - cmake --build .
    - cd ..
    - python3 tools/ci/run_tests.py build
  artifacts:
    when: always
    reports:
      junit: build/test_results_*.xml

# Build and test EtcPal with OS and network support disabled
# This is currently done on Linux but with the OS and network targets set to none.
bare-metal-build-and-test:
  stage: build
  image: rikorose/gcc-cmake:gcc-11
  tags:
    - etc-linux-docker
  variables:
    CMAKE_DEFS: -DETCPAL_BUILD_TESTS=ON -DCMAKE_C_FLAGS='-fsanitize=address' -DCMAKE_CXX_FLAGS='-fsanitize=address' -DCMAKE_EXE_LINKER_FLAGS='-fsanitize=address' -DETCPAL_OS_TARGET='none' -DETCPAL_NET_TARGET='none'
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends python3-pip
    - python3 -m pip install unity-test-parser
    - mkdir build
    - cd build
    - cmake -G "Unix Makefiles" ${CMAKE_DEFS} ..
    - cmake --build .
    - cd ..
    - python3 tools/ci/run_tests.py build

freertos-lwip-build-and-test:
  stage: build-freertos
  tags:
    - ct-etcpal-test
  script:
    - python C:\etcpal_testing\build_and_test_etcpal.py $env:CI_PROJECT_DIR freertos_lwip
  artifacts:
    when: always
    reports:
      junit: test_results_*.xml

mqx-build-and-test:
  stage: build-mqx
  tags:
    - ct-etcpal-test
  script:
    - python C:\etcpal_testing\build_and_test_etcpal.py $env:CI_PROJECT_DIR mqx
  artifacts:
    when: always
    reports:
      junit: test_results_*.xml

lint:
  stage: build
  tags:
    - etc-linux-docker
  image: rikorose/gcc-cmake:gcc-11
  variables:
    CLANG_TIDY_COMMAND: clang-tidy-12;--warnings-as-errors=*
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends lsb-release wget software-properties-common
    - wget https://apt.llvm.org/llvm.sh
    - chmod +x llvm.sh
    - ./llvm.sh 12
    - apt-get install -y --no-install-recommends clang-tidy-12
    - mkdir build
    - cd build
    - cmake -G "Unix Makefiles" ${COMMON_CMAKE_DEFS} -DCMAKE_C_CLANG_TIDY="${CLANG_TIDY_COMMAND}" -DCMAKE_CXX_CLANG_TIDY="${CLANG_TIDY_COMMAND}" ..
    - cmake --build . -j
   
deploy-docs:
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  tags:
    - etc-linux-docker
  image: ubuntu:20.04
  variables:
    GH_REPO_NAME: EtcPalDocs
    GH_REPO_REF: github.com/ETCLabs/EtcPalDocs.git
    GH_REPO_TOKEN: $SVC_ETCLABS_REPO_TOKEN
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends python3 python3-pip git
    - python3 -m pip config set global.index-url https://artifactory-mid.etcconnect.com/artifactory/api/pypi/ETC-PyPI/simple
    - python3 -m pip config set global.trusted-host artifactory-mid.etcconnect.com
    - python3 -m pip install etclibtool
    - chmod +x tools/ci/install_doxygen_1.9.1.sh
    - tools/ci/install_doxygen_1.9.1.sh
    - chmod +x tools/ci/publish_docs.sh
    - tools/ci/publish_docs.sh

# Deploy versioned builds of EtcPal
include:
  - project: 'etc/common-tech/tools/gitlab-ci-util'
    ref: v1.0.1
    file: '/ci-yml/deploy-versioned-build.yml'
